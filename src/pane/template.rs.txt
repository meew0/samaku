// Basic template for new panes, so I don't need to skeletonize one of the existing ones every time...
// The pane must also be registered in `PaneState`, and consequently in the dispatch methods.

use crate::message;

#[derive(Debug, Clone)]
pub struct State {
}

impl Default for State {
    fn default() -> Self {
        Self {
        }
    }
}

pub fn view<'a>(
    self_pane: super::Pane,
    global_state: &'a crate::Samaku,
    pane_state: &'a State,
) -> super::View<'a> {
    let content = todo!();

    super::View {
        title: iced::widget::text("Pane title").into(),
        content: iced::widget::container(content)
            .width(iced::Length::Fill)
            .height(iced::Length::Fill)
            .center_x()
            .center_y()
            .into(),
    }
}

#[allow(clippy::needless_pass_by_value)]
pub fn update(
    grid_state: &mut State,
    pane_message: message::Pane,
) -> iced::Command<message::Message> {
    match pane_message {
        _ => (),
    }

    iced::Command::none()
}
